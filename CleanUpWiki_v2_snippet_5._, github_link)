with open(wiki_filepath, 'w') as f:
                        f.write(updated_content)

                    log(f"Processed {wiki_filepath} and moved code to {code_repo_dir}")
    except Exception as e:
        log(f"Error processing wiki files: {e}")
        raise

def update_changelog(code_repo_dir, log_message):
    try:
        changelog_path = os.path.join(code_repo_dir, "CHANGELOG.md")
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_entry = f"{timestamp} - {log_message}\n"

        if os.path.exists(changelog_path):
            with open(changelog_path, 'a') as changelog_file:
                changelog_file.write(log_entry)
        else:
            with open(changelog_path, 'w') as changelog_file:
                changelog_file.write("# CHANGELOG\n\n")
                changelog_file.write(log_entry)

        log(f"Updated CHANGELOG.md with: {log_message}")
    except Exception as e:
        log(f"Error updating changelog: {e}")
        raise

def init_commit_code_repo(code_repo_dir, commit_message):
    try:
        if not os.path.exists(os.path.join(code_repo_dir, ".git")):
            subprocess.run(["git", "init"], cwd=code_repo_dir, check=True)
            print("Initialized a new git repo.")
        else:
            print("Git repo already initialized.")

        subprocess.run(["git", "add", "."], cwd=code_repo_dir, check=True)
        subprocess.run(["git", "commit", "-m", commit_message], cwd=code_repo_dir, check=True)
        print(f"Committed changes with message: {commit_message}")
    except subprocess.CalledProcessError as e:
        log(f"Error during git operations: {e}")
        raise
    except Exception as e:
        log(f"General error during git commit: {e}")
        raise

def log(message):
    log_file = os.path.join("C:\\WikiMigration", "migration.log")
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file, 'a') as log_f:
        log_f.write(f"{timestamp} - {message}\n")
    print(message)

def main():
    try:
        config = load_input_config("input.yml")
        wiki_repo_url = config['wiki_repo_url']
        dump_directory = config['dump_directory']
        code_repo_url = config['code_repo_url']
        code_repo_directory = config['code_repo_directory']

        clone_wiki_repo(wiki_repo_url, dump_directory)

        process_wiki_files(dump_directory, code_repo_url, code_repo_directory)

        update_changelog(code_repo_directory, "Moved code from Wiki to code repository.")

        init_commit_code_repo(code_repo_directory, "Initial commit: Imported code from Wiki.")
    except Exception as e:
        log(f"Script failed with error: {e}")

if __name__ == "__main__":
    main()