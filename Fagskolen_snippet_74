#### Hva man kan lære seg
1. **HTML-struktur**: Forstå hvordan man strukturerer en webside med HTML.
2. **CSS-styling**: Lær hvordan man bruker CSS til å style HTML-elementer og lage en visuelt tiltalende nettside.
3. **Bilde- og videohåndtering**: Forstå hvordan man integrerer bilder og videoer i en webside.
4. **Versjonskontroll med Git**: Lær hvordan man bruker Git for å administrere versjoner av koden og samarbeide med andre utviklere.

### Kilder på nettet for dypere forståelse
- [MDN Web Docs - HTML](https://developer.mozilla.org/en-US/docs/Web/HTML)
- [MDN Web Docs - CSS](https://developer.mozilla.org/en-US/docs/Web/CSS)
- [W3Schools - HTML and CSS](https://www.w3schools.com/html/default.asp)
- [Pro Git Book](https://git-scm.com/book/en/v2)

---

### Repository: [frontend-tema02](https://github.com/catharinasorum/frontend-tema02)

#### Innhold i Repository
- Diverse filer og mapper som sannsynligvis inneholder oppgaver og løsninger relatert til tema 2 i en kursserie om frontend-utvikling.

#### Hva man kan lære seg
1. **Videregående HTML og CSS**: Forstå mer avanserte konsepter i HTML og CSS, inkludert responsive design og CSS grid/flexbox.
2. **JavaScript-grunnleggende**: Lær hvordan man bruker JavaScript for å gjøre nettsider interaktive.
3. **Frontend-rammeverk**: Få en introduksjon til populære frontend-rammeverk som React, Vue eller Angular.

### Kilder på nettet for dypere forståelse
- [MDN Web Docs - JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
- [CSS-Tricks - A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)
- [CSS-Tricks - A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)
- [React Documentation](https://reactjs.org/docs/getting-started.html)

---

### Repository: [oppgavesett02](https://github.com/catharinasorum/oppgavesett02)

#### Innhold i Repository
- Diverse filer og mapper som sannsynligvis inneholder oppgaver og løsninger relatert til oppgavesett 2.

#### Hva man kan lære seg
1. **Problemløsning med JavaScript**: Forstå hvordan man bruker JavaScript for å løse spesifikke oppgaver og problemer.
2. **DOM-manipulering**: Lær hvordan man bruker JavaScript til å manipulere Document Object Model (DOM) for å oppdatere innholdet på en webside dynamisk.
3. **Event-håndtering**: Forstå hvordan man håndterer brukerinteraksjoner på en webside ved hjelp av JavaScript-events.

### Kilder på nettet for dypere forståelse
- [Eloquent JavaScript](https://eloquentjavascript.net/)
- [JavaScript.info](https://javascript.info/)
- [MDN Web Docs - DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)
- [W3Schools - JavaScript Events](https://www.w3schools.com/js/js_events.asp)

---

### Repository: [skjemaer](https://github.com/catharinasorum/skjemaer)

#### Innhold i Repository
- Diverse filer og mapper som sannsynligvis inneholder koden og ressursene for et prosjekt relatert til skjemaer.

#### Hva man kan lære seg
1. **HTML-skjemaer**: Forstå hvordan man oppretter og bruker HTML-skjemaer for å samle inn data fra brukere.
2. **Validering av skjemaer**: Lær hvordan man validerer data i skjemaer både på klientsiden (med JavaScript) og på serversiden.
3. **Brukeropplevelse (UX) med skjemaer**: Forstå hvordan man designer skjemaer som er brukervennlige og intuitive.

### Kilder på nettet for dypere forståelse
- [MDN Web Docs - HTML Forms](https://developer.mozilla.org/en-US/docs/Learn/Forms)
- [W3Schools - HTML Form Elements](https://www.w3schools.com/html/html_form_elements.asp)
- [JavaScript Form Validation](https://www.the-art-of-web.com/javascript/validate/)

---

### Repository: [oppgavesett01](https://github.com/catharinasorum/oppgavesett01)

#### Innhold i Repository
- Diverse filer og mapper som sannsynligvis inneholder oppgaver og løsninger relatert til oppgavesett 1.

#### Hva man kan lære seg
1. **Grunnleggende webutvikling**: Forstå grunnleggende konsepter i HTML, CSS, og JavaScript.
2. **Introduksjon til programmering**: Lær grunnleggende programmeringsprinsipper og -teknikker ved hjelp av JavaScript.
3. **Koding og debugging**: Forstå hvordan man skriver, tester, og feilsøker kode i et webprosjekt.

### Kilder på nettet for dypere forståelse
- [MDN Web Docs - Getting started with the Web](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web)
- [Codecademy - Learn JavaScript](https://www.codecademy.com/learn/introduction-to-javascript)
- [FreeCodeCamp](https://www.freecodecamp.org/)

---

### Repository: [oppgavesett03](https://github.com/catharinasorum/oppgavesett03)

#### Innhold i Repository
- Diverse filer og mapper som sannsynligvis inneholder oppgaver og løsninger relatert til oppgavesett 3.

#### Hva man kan lære seg
1. **Videregående JavaScript**: Forstå mer avanserte JavaScript-konsepter som asynkron programmering, løfter (promises), og moduler.
2. **Frontend-utvikling**: Lær hvordan man bygger mer komplekse og interaktive brukergrensesnitt med JavaScript og eventuelt et frontend-rammeverk.
3. **Prosjektorganisering**: Forstå hvordan man organiserer og strukturerer et større webprosjekt.

### Kilder på nettet for dypere forståelse
- [JavaScript.info](https://javascript.info/)
- [MDN Web Docs - Asynchronous JavaScript](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous)
- [React Documentation](https://reactjs.org/docs/getting-started.html)
- [Vue.js Documentation](https://vuejs.org/v2/guide/)

Ved å utforske disse repositoryene og bruke de nevnte kildene, kan man få en omfattende forståelse av ulike aspekter av webutvikling, fra grunnleggende HTML og CSS til avansert JavaScript og bruk av frontend-rammeverk.

### Repository: [frontend-test](https://github.com/krli008/frontend-test)

#### Innhold i Repository
- **README.md**: Kort beskrivelse av prosjektet.

#### README.md
Innholdet i README.md-filen: