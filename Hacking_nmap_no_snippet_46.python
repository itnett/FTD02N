import subprocess
import sys
import time
import datetime

TARGET = sys.argv[1] if len(sys.argv) > 1 else None
LOGFILE = "scan_results.log"

def log(message):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] {message}"
    print(log_message)
    with open(LOGFILE, "a") as logfile:
        logfile.write(log_message + "\n")

def run_command(command):
    log(f"Running command: {' '.join(command)}")
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    log(result.stdout)
    log(result.stderr)
    return result

def scan(target):
    log(f"Start scanning {target}")

    # Step 1: ARP scan to check if the target is up (least disruptive)
    log("Step 1: Performing ARP scan to check if the target is up")
    result = run_command(["nmap", "-sn", "-PR", target])
    if result.returncode != 0:
        log("ARP scan indicates the target is down. Exiting.")
        sys.exit(1)

    # Step 2: DNS query to check for open services (very stealthy)
    log("Step 2: Performing DNS query to check for open services")
    run_command(["dig", target])

    # Step 3: Passive OS fingerprinting (completely passive)
    log("Step 3: Performing Passive OS fingerprinting")
    p0f_process = subprocess.Popen(["p0f", "-i", "any", "-p"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    time.sleep(60)
    p0f_process.terminate()
    stdout, stderr = p0f_process.communicate()
    log(stdout)
    log(stderr)

    # Step 4: SYN scan for open ports (still stealthy)
    log("Step 4: Performing SYN scan for open ports")
    result = run_command(["nmap", "-sS", target, "-oN", "syn_scan.txt"])
    with open("syn_scan.txt", "r") as syn_file:
        open_ports = ",".join([line.split("/")[0] for line in syn_file if "/" in line and "open" in line])
    if not open_ports:
        log("No open ports found with SYN scan. Exiting.")
        sys.exit(1)
    log(f"Open ports found: {open_ports}")

    # Step 5: Version detection on open ports
    log("Step 5: Performing version detection on open ports")
    run_command(["nmap", "-sV", "-p", open_ports, target, "-oN", "version_detection.txt"])

    # Step 6: OS detection (slightly more intrusive)
    log("Step 6: Performing OS detection")
    run_command(["nmap", "-O", target, "-oN", "os_detection.txt"])

    # Step 7: TCP Connect scan on ports that did not respond to SYN scan (more intrusive)
    log("Step 7: Performing TCP Connect scan on ports that did not respond to SYN scan")
    run_command(["nmap", "-sT", "-p", open_ports, target, "-oN", "tcp_connect_scan.txt"])

    # Step 8: UDP scan on common ports
    log("Step 8: Performing UDP scan on common ports")
    run_command(["nmap", "-sU", "--top-ports", "20", target, "-oN", "udp_scan.txt"])

    # Step 9: Perform FIN, Xmas, and Null scans (even more intrusive)
    log("Step 9: Performing FIN, Xmas, and Null scans")
    run_command(["nmap", "-sF", "-p", open_ports, target, "-oN", "fin_scan.txt"])
    run_command(["nmap", "-sX", "-p", open_ports, target, "-oN", "xmas_scan.txt"])
    run_command(["nmap", "-sN", "-p", open_ports, target, "-oN", "null_scan.txt"])

    # Step 10: Perform ACK scan to map out firewall rules
    log("Step 10: Performing ACK scan to map out firewall rules")
    run_command(["nmap", "-sA", "-p", open_ports, target, "-oN", "ack_scan.txt"])

    # Step 11: Idle scan to further probe stealthily
    log("Step 11: Performing Idle scan to further probe stealthily")
    run_command(["nmap", "-sI", "<zombie_host>", target, "-oN", "idle_scan.txt"])

    # Step 12: Use Hping for more granular control
    log("Step 12: Using Hping for more granular control")
    run_command(["hping3", "-S", target, "-p", open_ports, "-c", "1"])
    run_command(["hping3", "-F", target, "-p", open_ports, "-c", "1"])
    run_command(["hping3", "-UPF", target, "-p", open_ports, "-c", "1"])

    # Step 13: Masscan for fast scanning of large networks
    log("Step 13: Using Masscan for fast scanning of large networks")
    run_command(["masscan", "-p" + open_ports, target, "--rate=1000"])

    # Step 14: Netcat for banner grabbing and deeper probing
    log("Step 14: Using Netcat for banner grabbing and deeper probing")
    for port in open_ports.split(","):
        run_command(["nc", "-vz", target, port])

    log(f"Scanning completed for {target}")

if not TARGET:
    print("Usage: python intelligent_scan.py <target>")
    sys.exit(1)

scan(TARGET)